#!/usr/bin/env python3
# bot_async_json_with_sd_lm_sqlite.py

import os
import asyncio
import logging
import base64
import yaml
import json
from io import BytesIO
from urllib.parse import urlparse
from datetime import datetime
import requests
import aiohttp
import aiosqlite
from dotenv import load_dotenv
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# 1) –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
JSON_URL = os.getenv("JSON_URL")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ yaml
options = 'vars.yaml'
with open(options, 'r') as f:
    yaml_data = yaml.load(f, Loader=yaml.FullLoader)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SD –∏ LM Studio
SD_URL = os.getenv("SD_URL", "http://127.0.0.1:7860")
LM_STUDIO_URL = os.getenv("LM_STUDIO_URL", "http://127.0.0.1:1234")
LM_MODEL = os.getenv("LM_MODEL", "saiga_nemo_12b_gguf")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite
DATABASE_PATH = os.getenv("DATABASE_PATH", "telegram_bot.db")

if not BOT_TOKEN or not CHANNEL_ID or not JSON_URL:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ –≤ .env BOT_TOKEN, CHANNEL_ID –∏ JSON_URL")

bot = Bot(token=BOT_TOKEN)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
async def init_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            create_table_query = yaml_data['queries']["create_table_q"]
            await db.execute(create_table_query)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await db.execute("CREATE INDEX IF NOT EXISTS idx_published_at ON post_logs(published_at);")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_interrogate_model ON post_logs(interrogate_model);")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_description_model ON post_logs(description_model);")

            await db.commit()
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# 3) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite
async def save_post_to_db(
        image_url: str,
        image_data: bytes,
        description: str,
        tags: list,
        interrogate_model: str,
        interrogate_method: str,
        interrogate_prompt: str,
        description_model: str,
        description_prompt: str
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            insert_query = yaml_data['queries']["insert_q"]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –≤ JSON —Å—Ç—Ä–æ–∫—É
            tags_json = json.dumps(tags, ensure_ascii=False)

            cursor = await db.execute(insert_query, (
                image_url,
                image_data,
                description,
                tags_json,
                datetime.now().isoformat(),
                interrogate_model,
                interrogate_method,
                interrogate_prompt,
                description_model,
                description_prompt
            ))

            await db.commit()
            post_id = cursor.lastrowid
            logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î —Å ID: {post_id}")
            return post_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


# 4) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
async def get_database_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = await db.execute(yaml_data['queries']['logs_count_q'])
            total_posts = (await cursor.fetchone())[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cursor = await db.execute(yaml_data['queries']['str_count_q'])
            posts_24h = (await cursor.fetchone())[0]

            # –¢–æ–ø –º–æ–¥–µ–ª–µ–π
            cursor = await db.execute(yaml_data['queries']['top_models_q'])
            top_models = await cursor.fetchall()

            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: –≤—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}, –∑–∞ 24—á: {posts_24h}")
            logging.info(f"üìä –¢–æ–ø –º–æ–¥–µ–ª–µ–π: {top_models}")

            return {
                'total_posts': total_posts,
                'posts_24h': posts_24h,
                'top_models': top_models
            }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


# 5) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ API
def fetch_images_data(api_url: str) -> list[dict]:
    resp = requests.get(api_url)
    resp.raise_for_status()
    data = resp.json()
    images = data.get("images", [])
    result = []
    for img in images:
        url = img.get("url")
        if not url:
            continue
        tags = [t.get("name") for t in img.get("tags", []) if t.get("name")]
        result.append({
            "url": url,
            "tags": tags
        })
    return result


# 6) –§—É–Ω–∫—Ü–∏—è –¥–ª—è Interrogate —á–µ—Ä–µ–∑ Stable Diffusion API
async def interrogate_deepbooru(image_bytes: bytes) -> tuple[list[str], str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SD –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Deepbooru
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤, –ø—Ä–æ–º–ø—Ç –¥–ª—è interrogate)
    """
    interrogate_prompt = "Analyze this image using Deepbooru model to extract tags"

    try:
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        payload = {
            "image": f"data:image/png;base64,{image_base64}",
            "model": "deepbooru"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{SD_URL}/sdapi/v1/interrogate",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    tags_string = result.get("caption", "")
                    tags = [tag.strip() for tag in tags_string.split(",") if tag.strip()]
                    return tags, interrogate_prompt
                else:
                    logging.error(f"SD API error: {response.status}")
                    return [], interrogate_prompt

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ interrogate: {e}")
        return [], interrogate_prompt


# 7) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ LM Studio
async def process_tags_with_lm(tags: list[str]) -> tuple[str, str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏ –≤ LM Studio –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–º–ø—Ç)
    """
    tags_str = ", ".join(tags)
# –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç —Ç–∞–∫ —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–æ —Ç–µ–≥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–ª—Å—è ? –∫–∞–∫ –≤ SQL-–∑–∞–ø—Ä–æ—Å–∞—Ö
    prompt = f"""–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. 
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–≥–æ–≤ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–¢–µ–≥–∏: {tags_str}

–û–ø–∏—Å–∞–Ω–∏–µ:"""

    try:
        payload = {
            "model": LM_MODEL,
            "messages": [
                {"role": "system", "content": yaml_data['prompts']['content']},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 150
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{LM_STUDIO_URL}/v1/chat/completions",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=120)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    description = result["choices"][0]["message"]["content"].strip()
                    return description, prompt
                else:
                    logging.error(f"LM Studio API error: {response.status}")
                    return "", prompt

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ LM Studio: {e}")
        return "", prompt


# 8) –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def post_images_async():
    try:
        images = fetch_images_data(JSON_URL)

        for item in images:
            img_url = item["url"]
            original_tags = item["tags"]

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            resp = requests.get(img_url)
            resp.raise_for_status()
            image_bytes = resp.content

            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç Deepbooru
            deepbooru_tags, interrogate_prompt = await interrogate_deepbooru(image_bytes)
            logging.info(f"Deepbooru tags: {deepbooru_tags}")

            # 2. –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —Ç–µ–≥–∏ –æ—Ç Deepbooru
            all_tags = list(set(original_tags + deepbooru_tags))

            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ LM Studio
            description, description_prompt = await process_tags_with_lm(all_tags)
            logging.info(f"LM Studio description: {description}")

            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            caption_parts = []

            if description:
                caption_parts.append(description)

            if all_tags:
                hashtags = [f"#{tag.replace(' ', '_').replace('-', '_')}" for tag in all_tags[:10]]
                caption_parts.append("\n\n" + " ".join(hashtags))

            caption = "\n".join(caption_parts) if caption_parts else None

            # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            bio = BytesIO(image_bytes)
            bio.name = os.path.basename(urlparse(img_url).path)
            bio.seek(0)

            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=bio,
                caption=caption[:1024] if caption else None
            )

            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            post_id = await save_post_to_db(
                image_url=img_url,
                image_data=image_bytes,
                description=description,
                tags=all_tags,
                interrogate_model="deepbooru",
                interrogate_method="SD API v1/interrogate",
                interrogate_prompt=interrogate_prompt,
                description_model=LM_MODEL,
                description_prompt=description_prompt
            )

            if post_id:
                logging.info(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {post_id}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(2)

        logging.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await get_database_stats()

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %s", e)


# 9) –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(
        format="%(asctime)s %(levelname)s:%(message)s",
        level=logging.INFO
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await get_database_stats()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        resp = requests.get(f"{SD_URL}/sdapi/v1/options")
        if resp.status_code == 200:
            logging.info("‚úÖ Stable Diffusion API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logging.warning("‚ö†Ô∏è Stable Diffusion API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Stable Diffusion")

    try:
        resp = requests.get(f"{LM_STUDIO_URL}/v1/models")
        if resp.status_code == 200:
            logging.info("‚úÖ LM Studio API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logging.warning("‚ö†Ô∏è LM Studio API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LM Studio")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists(DATABASE_PATH):
        size = os.path.getsize(DATABASE_PATH) / 1024 / 1024  # MB
        logging.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite: {DATABASE_PATH} ({size:.2f} MB)")
    else:
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")

    # –û–¥–∏–Ω —Ä–∞–∑ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    await post_images_async()

    # –ò –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 120 –º–∏–Ω—É—Ç
    scheduler = AsyncIOScheduler()
    timing = yaml_data['timings']['time_type']
    scheduler.add_job(post_images_async, "interval", timing=yaml_data['timings']['time_scope'])
    scheduler.start()

    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())

# ToDo
# –°–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —è–º–ª-—Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–≥–æ–≤ –∏ –ø–æ –æ—à–∏–±–∫–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–∞–ª–∏–≤–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
# –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—è –∏–∑ —è–º–ª–æ–≤
# –°–¥–µ–ª–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
# –°–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
# –ü–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–µ–æ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
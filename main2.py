#!/usr/bin/env python3
# bot_async_json_with_sd_lm_sqlite.py

import os
import asyncio
import logging
import base64
import yaml
import json
from io import BytesIO
from urllib.parse import urlparse
from datetime import datetime
import requests
import aiohttp
import aiosqlite
from dotenv import load_dotenv
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# 1) –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
JSON_URL = os.getenv("JSON_URL")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ yaml
options = 'vars.yaml'
with open(options, encoding="utf-8") as f:
    yaml_data = yaml.load(f, Loader=yaml.FullLoader)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SD –∏ LM Studio
SD_URL = os.getenv("SD_URL", "http://127.0.0.1:7860")
LM_STUDIO_URL = os.getenv("LM_STUDIO_URL", "http://127.0.0.1:1234")
LM_MODEL = os.getenv("LM_MODEL", "saiga_nemo_12b_gguf")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite
DATABASE_PATH = os.getenv("DATABASE_PATH", "telegram_bot.db")

if not BOT_TOKEN or not CHANNEL_ID or not JSON_URL:
    raise RuntimeError("–£–∫–∞–∂–∏—Ç–µ –≤ .env BOT_TOKEN, CHANNEL_ID –∏ JSON_URL")

bot = Bot(token=BOT_TOKEN)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
async def init_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            create_table_query = yaml_data['queries']["create_table_q"]
            await db.execute(create_table_query)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await db.execute("CREATE INDEX IF NOT EXISTS idx_published_at ON post_logs(published_at);")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_interrogate_model ON post_logs(interrogate_model);")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_description_model ON post_logs(description_model);")

            await db.commit()
            logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# 3) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite
async def save_post_to_db(
        image_url: str,
        image_data: bytes,
        description: str,
        tags: list,
        interrogate_model: str,
        interrogate_method: str,
        interrogate_prompt: str,
        description_model: str,
        description_prompt: str
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            insert_query = yaml_data['queries']["insert_q"]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –≤ JSON —Å—Ç—Ä–æ–∫—É
            tags_json = json.dumps(tags, ensure_ascii=False)

            cursor = await db.execute(insert_query, (
                image_url,
                image_data,
                description,
                tags_json,
                datetime.now().isoformat(),
                interrogate_model,
                interrogate_method,
                interrogate_prompt,
                description_model,
                description_prompt
            ))

            await db.commit()
            post_id = cursor.lastrowid
            logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î —Å ID: {post_id}")
            return post_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


# 4) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
async def get_database_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor = await db.execute(yaml_data['queries']['logs_count_q'])
            total_posts = (await cursor.fetchone())[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cursor = await db.execute(yaml_data['queries']['str_count_q'])
            posts_24h = (await cursor.fetchone())[0]

            # –¢–æ–ø –º–æ–¥–µ–ª–µ–π
            cursor = await db.execute(yaml_data['queries']['top_models_q'])
            top_models = await cursor.fetchall()

            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: –≤—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}, –∑–∞ 24—á: {posts_24h}")
            logging.info(f"üìä –¢–æ–ø –º–æ–¥–µ–ª–µ–π: {top_models}")

            return {
                'total_posts': total_posts,
                'posts_24h': posts_24h,
                'top_models': top_models
            }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


# 5) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ API
def fetch_images_data(api_url: str) -> list[dict]:
    resp = requests.get(api_url)
    resp.raise_for_status()
    data = resp.json()
    images = data.get("images", [])
    result = []
    for img in images:
        url = img.get("url")
        if not url:
            continue
        tags = [t.get("name") for t in img.get("tags", []) if t.get("name")]
        result.append({
            "url": url,
            "tags": tags
        })
    return result


# 6) –§—É–Ω–∫—Ü–∏—è –¥–ª—è Interrogate —á–µ—Ä–µ–∑ Stable Diffusion API
async def interrogate_deepbooru(image_bytes: bytes) -> tuple[list[str], str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SD –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ interrogate –º–æ–¥–µ–ª–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤, –ø—Ä–æ–º–ø—Ç –¥–ª—è interrogate)
    """
    interrogate_prompt = "deepbooru"

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º deepdanbooru (—á–∞—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–º–µ—Å—Ç–æ deepbooru)
        for model_name in ["deepdanbooru", "deepbooru", "clip", "interrogate"]:
            try:
                payload = {
                    "image": f"data:image/png;base64,{image_base64}",
                    "model": model_name
                }

                async with aiohttp.ClientSession() as session:
                    async with session.post(
                            f"{SD_URL}/sdapi/v1/interrogate",
                            json=payload,
                            headers={"Content-Type": "application/json"},
                            timeout=aiohttp.ClientTimeout(total=120)
                    ) as response:
                        if response.status == 200:
                            result = await response.json()
                            caption = result.get("caption", "")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if caption and caption not in ["<error>", "", "None"]:
                                logging.info(f"–£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")

                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
                                if model_name in ["deepbooru", "deepdanbooru"]:
                                    # –¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                                    tags = [tag.strip() for tag in caption.split(",") if tag.strip()]
                                else:
                                    # CLIP –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                                    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –±–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
                                    words = caption.replace(",", " ").replace(".", " ").split()
                                    tags = [word.strip() for word in words
                                            if len(word.strip()) > 3 and not word.strip().lower() in
                                                                             ["with", "that", "this", "from", "have",
                                                                              "been", "were", "are"]]

                                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤ –æ—Ç {model_name}")
                                return tags[:20], f"{model_name}_interrogate"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            else:
                                logging.warning(f"–ú–æ–¥–µ–ª—å {model_name} –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π/–æ—à–∏–±–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {caption}")

                        elif response.status == 404:
                            logging.debug(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é...")
                        else:
                            error_text = await response.text()
                            logging.debug(f"–û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model_name}: {response.status} - {error_text}")

            except Exception as e:
                logging.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å {model_name}: {e}")
                continue

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        logging.error("–ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å interrogate –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return [], "no_interrogate"

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ interrogate: {e}")
        return [], "error"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö interrogate –º–æ–¥–µ–ª–µ–π
async def get_available_interrogate_models():
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ interrogate –¥–æ—Å—Ç—É–ø–Ω—ã
    """
    available_models = []

    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å)
        test_image = base64.b64encode(
            b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01'
            b'\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\rIDATx\x9cc\xf8\x0f'
            b'\x00\x00\x01\x01\x00\x05\x00\x00\x00\x00IEND\xaeB`\x82'
        ).decode('utf-8')

        for model in ["deepdanbooru", "deepbooru", "clip", "interrogate"]:
            try:
                payload = {
                    "image": f"data:image/png;base64,{test_image}",
                    "model": model
                }

                async with aiohttp.ClientSession() as session:
                    async with session.post(
                            f"{SD_URL}/sdapi/v1/interrogate",
                            json=payload,
                            timeout=aiohttp.ClientTimeout(total=10)
                    ) as response:
                        if response.status == 200:
                            available_models.append(model)

            except:
                pass

        return available_models

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return []


# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º tagger (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
async def interrogate_with_tagger(image_bytes: bytes) -> tuple[list[str], str]:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Tagger –¥–ª—è SD WebUI (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
    """
    try:
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        # –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Tagger extension
        payload = {
            "image": f"data:image/png;base64,{image_base64}",
            "threshold": 0.35  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{SD_URL}/tagger/v1/interrogate",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=60)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    # Tagger –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–≥–∞–º–∏ –∏ –∏—Ö –≤–µ—Å–∞–º–∏
                    tags_dict = result.get("tags", {})
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø —Ç–µ–≥–∏
                    sorted_tags = sorted(tags_dict.items(), key=lambda x: x[1], reverse=True)
                    tags = [tag for tag, weight in sorted_tags if weight > 0.35][:20]

                    if tags:
                        logging.info(f"Tagger –≤–µ—Ä–Ω—É–ª {len(tags)} —Ç–µ–≥–æ–≤")
                        return tags, "tagger_extension"

        return [], "tagger_not_available"

    except Exception as e:
        logging.debug(f"Tagger extension –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return [], "tagger_error"


# 7) –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ LM Studio
async def process_tags_with_lm(tags: list[str]) -> tuple[str, str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–≥–∏ –≤ LM Studio –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ–º–ø—Ç)
    """
    tags_str = ", ".join(tags)
    print(tags_str)
# –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–º–ø—Ç —Ç–∞–∫ —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–æ —Ç–µ–≥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–ª—Å—è ? –∫–∞–∫ –≤ SQL-–∑–∞–ø—Ä–æ—Å–∞—Ö
    prompt = f"""–¢—ã - –ø–∏—à–µ—à—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ö–µ–Ω—Ç–∞–π-–º–∞–Ω–≥–∏. 
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–≥–æ–≤ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–¢–µ–≥–∏: {tags_str}

–û–ø–∏—Å–∞–Ω–∏–µ:"""

    try:
        payload = {
            "model": LM_MODEL,
            "messages": [
                {"role": "system", "content": yaml_data['prompts']['content']},
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.7,
            "max_tokens": 150
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{LM_STUDIO_URL}/v1/chat/completions",
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=120)
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    description = result["choices"][0]["message"]["content"].strip()
                    return description, prompt
                else:
                    logging.error(f"LM Studio API error: {response.status}")
                    return "", prompt

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ LM Studio: {e}")
        return "", prompt


# 8) –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å post_images_async:

async def post_images_async():
    try:
        images = fetch_images_data(JSON_URL)

        for item in images:
            img_url = item["url"]
            original_tags = item["tags"]

            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            resp = requests.get(img_url)
            resp.raise_for_status()
            image_bytes = resp.content

            # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Tagger extension (–æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
            tags_from_ai, interrogate_method = await interrogate_with_tagger(image_bytes)

            # 2. –ï—Å–ª–∏ Tagger –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π interrogate
            if not tags_from_ai:
                tags_from_ai, interrogate_method = await interrogate_deepbooru(image_bytes)

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if tags_from_ai:
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tags_from_ai)} —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ {interrogate_method}")
                logging.info(f"–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤: {tags_from_ai[:5]}")
            else:
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ –æ—Ç AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ")

            # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —Ç–µ–≥–∏ –æ—Ç AI
            all_tags = list(set(original_tags + tags_from_ai))

            # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ LM Studio (–∏—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —Ç–µ–≥–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è)
            description, description_prompt = await process_tags_with_lm(all_tags)
            logging.info(f"LM Studio description: {description}")

            # 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            caption_parts = []

            if description:
                caption_parts.append(description)

            # –í –ø–æ–¥–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Å waifu.fm
            if original_tags:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ—à—Ç–µ–≥–æ–≤
                hashtags = [f"#{tag.replace(' ', '_').replace('-', '_')}"
                            for tag in original_tags[:10]]
                caption_parts.append("\n\n" + " ".join(hashtags))

            caption = "\n".join(caption_parts) if caption_parts else None

            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            bio = BytesIO(image_bytes)
            bio.name = os.path.basename(urlparse(img_url).path)
            bio.seek(0)

            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=bio,
                caption=caption[:1024] if caption else None
            )

            # 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            post_id = await save_post_to_db(
                image_url=img_url,
                image_data=image_bytes,
                description=description,
                tags=all_tags,
                interrogate_model=interrogate_method.split('_')[0] if interrogate_method else "none",
                interrogate_method=interrogate_method,
                interrogate_prompt="auto_interrogate",
                description_model=LM_MODEL,
                description_prompt=description_prompt
            )

            if post_id:
                logging.info(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {post_id}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(2)

        logging.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await get_database_stats()

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: %s", e)


# 9) –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.basicConfig(
        format="%(asctime)s %(levelname)s:%(message)s",
        level=logging.INFO
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await get_database_stats()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        resp = requests.get(f"{SD_URL}/sdapi/v1/options")
        if resp.status_code == 200:
            logging.info("‚úÖ Stable Diffusion API –¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ interrogate
            available_models = await get_available_interrogate_models()
            if available_models:
                logging.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ interrogate: {', '.join(available_models)}")
            else:
                logging.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ interrogate –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Tagger extension
            try:
                tagger_resp = requests.get(f"{SD_URL}/tagger/v1/")
                if tagger_resp.status_code in [200, 404]:  # 404 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç –µ—Å—Ç—å, –Ω–æ –Ω—É–∂–µ–Ω POST
                    logging.info("‚úÖ Tagger extension –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω")
            except:
                logging.info("‚ÑπÔ∏è Tagger extension –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        else:
            logging.warning("‚ö†Ô∏è Stable Diffusion API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Stable Diffusion: {e}")

    try:
        resp = requests.get(f"{LM_STUDIO_URL}/v1/models")
        if resp.status_code == 200:
            logging.info("‚úÖ LM Studio API –¥–æ—Å—Ç—É–ø–µ–Ω")
            models = resp.json().get("data", [])
            if models:
                logging.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {[m['id'] for m in models]}")
        else:
            logging.warning("‚ö†Ô∏è LM Studio API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LM Studio")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists(DATABASE_PATH):
        size = os.path.getsize(DATABASE_PATH) / 1024 / 1024  # MB
        logging.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite: {DATABASE_PATH} ({size:.2f} MB)")
    else:
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_PATH}")

    # –û–¥–∏–Ω —Ä–∞–∑ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    await post_images_async()

    # –ò –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
    scheduler = AsyncIOScheduler()
    scheduler.add_job(post_images_async, "interval", minutes=yaml_data['timings']['time_scope'])
    scheduler.start()

    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤—ã–º
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())

# ToDo
# –°–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —è–º–ª-—Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–≥–æ–≤ –∏ –ø–æ –æ—à–∏–±–∫–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–∞–ª–∏–≤–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É
# –°–¥–µ–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤—Å–µ –ø–æ–ª—è –∏–∑ —è–º–ª–æ–≤
# –°–¥–µ–ª–∞—Ç—å –¥–∞—à–±–æ—Ä–¥
# –°–¥–µ–ª–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
# –ü–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤–∏–¥–µ–æ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
# –°–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ(–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤/–ª–∞–π–∫–æ–≤/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
# –°–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∞–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞(–º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å TGStats –∏ –∏—Å–∫–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö/—á–∞—Ç–∞—Ö –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
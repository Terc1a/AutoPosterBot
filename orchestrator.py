import os
import requests
import asyncio
import logging
import yaml
from datetime import datetime, timedelta
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from typing import List, Set
import logging.handlers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏"""

    grey = "\x1b[38;21m"
    blue = "\x1b[34m"
    green = "\x1b[32m"
    yellow = "\x1b[33m"
    red = "\x1b[31m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"

    FORMATS = {
        logging.DEBUG: grey + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.INFO: green + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.WARNING: yellow + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.ERROR: red + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.CRITICAL: bold_red + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt, datefmt='%Y-%m-%d %H:%M:%S')
        return formatter.format(record)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
root_logger = logging.getLogger()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
console_handler = logging.StreamHandler()
console_handler.setFormatter(ColoredFormatter())
root_logger.addHandler(console_handler)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = logging.handlers.RotatingFileHandler(
    'logs/tgposter.log',
    maxBytes=10 * 1024 * 1024,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
file_handler.setFormatter(file_formatter)
root_logger.addHandler(file_handler)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è orchestrator
logger = logging.getLogger('orchestrator')
logger.info("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ logs/tgposter.log")

# —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

from services.reddit_service import fetch_latest, fetch_latest_posts
from services.waifu_service import fetch_images_data
from services.sd_service import interrogate_deepbooru, interrogate_with_tagger
from services.lm_service import process_tags_with_lm
from services.telegram_service_pyrogram import send_photo, send_video, send_animation, send_media_group, check_channel_access
from services.db_service import init_db, is_reddit_processed, mark_reddit_processed, save_post_to_db, save_scheduled_post

# —á–∏—Ç–∞–µ–º —Ç–∞–π–º–∏–Ω–≥–∏ –∏ subreddit
with open("vars.yaml", encoding="utf-8") as f:
    cfg = yaml.load(f, Loader=yaml.FullLoader)

SUBREDDITS = cfg["reddit"]["subreddits"]
INTERVAL_MIN = cfg["timings"]["time_scope"]
USE_TAGGER = cfg.get("use_tagger", False)
JSON_URL = os.getenv("JSON_URL")
LM_MODEL = os.getenv("LM_MODEL")

# –¢–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Telegram
EXCLUDED_TAGS = {
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    '1boy', '2boys', '3boys', '4boys', '5boys', 'multiple_boys', 'male_focus',
    '1girl', '2girls', '3girls', '4girls', '5girls', 'multiple_girls', 'female_focus',
    'solo', 'solo_focus', 'duo', 'group',

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
    'highres', 'absurdres', 'lowres', 'traditional_media', 'scan', 'photo',
    'commentary', 'english_commentary', 'chinese_commentary', 'commentary_request',
    'artist_name', 'watermark', 'signature', 'dated', 'username', 'web_address',

    # ID —Ç–µ–≥–∏
    'bad_id', 'bad_pixiv_id', 'bad_twitter_id', 'bad_tumblr_id',
    'pixiv_id', 'twitter_username', 'tumblr_username',

    # –§–æ–Ω—ã
    'simple_background', 'white_background', 'transparent_background',
    'gradient_background', 'grey_background', 'black_background',

    # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    'black_hair', 'brown_hair', 'blonde_hair', 'blue_hair', 'red_hair',
    'green_hair', 'purple_hair', 'pink_hair', 'white_hair', 'grey_hair',
    'short_hair', 'long_hair', 'medium_hair', 'very_long_hair',

    # –¶–≤–µ—Ç–∞ –≥–ª–∞–∑
    'black_eyes', 'brown_eyes', 'blue_eyes', 'red_eyes', 'green_eyes',
    'purple_eyes', 'yellow_eyes', 'pink_eyes', 'grey_eyes',

    # –ë–∞–∑–æ–≤–∞—è –æ–¥–µ–∂–¥–∞
    'shirt', 'black_shirt', 'white_shirt', 'blue_shirt', 'red_shirt',
    't-shirt', 'dress', 'skirt', 'pants', 'shorts', 'jacket',
    'clothes', 'clothing', 'uniform', 'school_uniform',

    # –û–±—â–∏–µ —Ç–µ–≥–∏
    'blush', 'smile', 'open_mouth', 'closed_mouth', 'teeth',
    'looking_at_viewer', 'looking_at_another', 'looking_away',
    'breasts', 'small_breasts', 'medium_breasts', 'large_breasts',
    'cleavage', 'collarbone', 'bare_shoulders', 'midriff',

    # –ú–µ—Ç–∞-—Ç–µ–≥–∏
    'duplicate', 'image_sample', 'md5_mismatch', 'revision',
    'translated', 'hard_translated', 'partially_translated',
    'translation_request', 'english', 'japanese', 'chinese',

    # –ü—Ä–æ—á–∏–µ –æ–±—â–∏–µ
    'hair', 'eyes', 'face', 'head', 'body', 'skin', 'lips',
    'standing', 'sitting', 'lying', 'kneeling', 'squatting',
    'indoors', 'outdoors', 'day', 'night', 'sky', 'cloud'
}


def calculate_publish_times(num_posts: int = 8) -> List[datetime]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤.
    –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç - –≤ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞.
    
    Args:
        num_posts: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        
    Returns:
        List[datetime]: —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    now = datetime.now()
    
    # –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —á–∞—Å (–æ–∫—Ä—É–≥–ª—è–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∞—Å—É)
    first_post_time = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
    
    publish_times = [first_post_time]
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    for i in range(1, num_posts):
        next_time = first_post_time + timedelta(hours=3 * i)
        publish_times.append(next_time)
    
    return publish_times


def filter_tags(tags: List[str]) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–µ–≥–∏, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ"""
    logger = logging.getLogger(__name__)
    logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤: –≤—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ ({len(tags)}): {tags[:20]}")
    
    filtered = []
    for tag in tags:
        # –û—á–∏—â–∞–µ–º —Ç–µ–≥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_tag = tag.strip()
        
        # –£–¥–∞–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–≥–∞
        clean_tag = clean_tag.lstrip('#:').strip()
        if not clean_tag or len(clean_tag) < 2:
            logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–≥: '{tag}'")
            continue
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        tag_normalized = clean_tag.lower().replace(' ', '_').replace('-', '_')

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –æ–±—â–∏–µ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ)
        minimal_excluded = {
            'solo', '1girl', '2girls', 'multiple_girls', '1boy', '2boys', 'multiple_boys',
            'highres', 'absurdres', 'lowres', 'simple_background', 'white_background',
            'looking_at_viewer', 'standing', 'sitting', 'lying'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if tag_normalized not in minimal_excluded:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–≥–∏ —Å —á–∏—Å–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ (1girl, 2boys –∏ —Ç.–¥.)
            if not (len(tag_normalized) > 1 and tag_normalized[0].isdigit()):
                filtered.append(clean_tag)
                logger.debug(f"‚úÖ –ü—Ä–∏–Ω—è—Ç —Ç–µ–≥: '{clean_tag}'")
            else:
                logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–≥ —Å —Ü–∏—Ñ—Ä–æ–π –≤ –Ω–∞—á–∞–ª–µ: '{tag}'")
        else:
            logger.debug(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–π —Ç–µ–≥: '{tag}'")

    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered)} —Ç–µ–≥–æ–≤ –∏–∑ {len(tags)}: {filtered[:10]}")
    return filtered[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–∞–º–∏


async def process_reddit_post(subreddit: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ subreddit, –ø–æ–∫–∞ –æ–¥–∏–Ω –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    """
    return await process_reddit_posts(subreddit, max_posts=3)


async def process_reddit_posts(subreddit: str, max_posts: int = 3) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ subreddit, –ø–æ–∫–∞ –æ–¥–∏–Ω –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    """
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Reddit r/{subreddit}...")

    posts = fetch_latest_posts(subreddit, limit=max_posts)
    if not posts:
        logger.info(f"üì≠ –ù–æ–≤—ã—Ö –º–µ–¥–∏–∞-–ø–æ—Å—Ç–æ–≤ –≤ r/{subreddit} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False

    for idx, post in enumerate(posts):
        logger.info(f"üì∞ –ü–æ—Å—Ç #{idx + 1}/{len(posts)}: {post['post_id']}")
        logger.info(f"üìã –¢–∏–ø: {post['media_type']}, —Ñ–∞–π–ª–æ–≤: {len(post['media_paths'])}")

        if await is_reddit_processed(post["post_id"]):
            logger.info(f"‚è≠Ô∏è –ü–æ—Å—Ç {post['post_id']} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
            continue

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç
        try:
            success = await process_single_reddit_post(post)
            if success:
                logger.info(f"‚úÖ –ü–æ—Å—Ç #{idx + 1} –∏–∑ Reddit r/{subreddit} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç #{idx + 1} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                continue
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ #{idx + 1}: {e}")
            continue

    logger.info(f"üì≠ –ù–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –∏–∑ r/{subreddit} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    return False


async def process_single_post_for_scheduling(post: dict, scheduled_time: datetime) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ—Ç–ª–æ–∂–∫—É Telegram.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—Ç–ª–æ–∂–∫—É, False –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ—Å—Ç–∞
    is_waifu = 'waifu_data' in post
    source = 'waifu' if is_waifu else 'reddit'
    
    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {source} –ø–æ—Å—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post['post_id']}")
    logger.info(f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ"
    if post["media_type"] == "video":
        logger.info(f"üé• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –æ—Ç–ª–æ–∂–∫—É —á–µ—Ä–µ–∑ USER API")
        try:
            await send_video(post["media_paths"][0], schedule_date=scheduled_time)
            logger.info("‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç–ª–æ–∂–∫—É Telegram")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –≤ –æ—Ç–ª–æ–∂–∫—É: {e}")
            return False
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ"
    if post["media_type"] == "gif":
        logger.info(f"üéûÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –≤ –æ—Ç–ª–æ–∂–∫—É —á–µ—Ä–µ–∑ USER API")
        try:
            await send_animation(post["media_paths"][0], schedule_date=scheduled_time)
            logger.info("‚úÖ GIF –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–ª–æ–∂–∫—É Telegram")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF –≤ –æ—Ç–ª–æ–∂–∫—É: {e}")
            return False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–ª–∏ –≥–∞–ª–µ—Ä–µ–∏)
    logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {'–≥–∞–ª–µ—Ä–µ—é' if post.get('is_gallery') else '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
        if is_waifu:
            # –î–ª—è waifu –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
            resp = requests.get(post["media_paths"][0], timeout=15)
            resp.raise_for_status()
            img_bytes = resp.content
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ waifu –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")
        else:
            # –î–ª—è Reddit –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏/–ø–æ—Å—Ç–∞
            first_image_path = post["media_paths"][0]
            logger.info(f"üîç –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {first_image_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(first_image_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {first_image_path}")
                return False
            
            with open(first_image_path, "rb") as f:
                img_bytes = f.read()
            logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            if len(img_bytes) < 1024:  # –ú–µ–Ω–µ–µ 1KB - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ
                logger.error(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ ({len(img_bytes)} –±–∞–π—Ç), –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
                # –ü–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logger.error(f"üîç –ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç —Ñ–∞–π–ª–∞: {img_bytes[:100]}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
            header = img_bytes[:10]
            logger.debug(f"üîç –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞: {header.hex()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTML (–≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
            if img_bytes.startswith(b'<html') or img_bytes.startswith(b'<!DOCTYPE'):
                logger.error(f"‚ùå –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç HTML –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
                logger.error(f"üîç –ù–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞: {img_bytes[:200].decode('utf-8', errors='ignore')}")
                return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
        logger.info("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI...")
        if USE_TAGGER:
            tags, method = await interrogate_with_tagger(img_bytes)
        else:
            tags, method = [], ""

        if not tags:
            tags, method = await interrogate_deepbooru(img_bytes)

        # –ï—Å–ª–∏ AI –Ω–µ –¥–∞–ª —Ç–µ–≥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫ —Ç–µ–≥–∏
        if not tags:
            logger.warning("üö´ AI –Ω–µ –¥–∞–ª —Ç–µ–≥–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫ —Ç–µ–≥–∏...")
            if is_waifu:
                tags = ["anime", "waifu", "girl", "art", "manga", "kawaii"]
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–≥–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
                title = post.get("title", "").lower()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ subreddit
                subreddit = post.get('subreddit', '').lower()
                
                if 'hentai' in subreddit:
                    fallback_tags = ["anime", "hentai", "girl", "manga", "art", "sexy"]
                elif 'ecchi' in subreddit:
                    fallback_tags = ["anime", "ecchi", "girl", "manga", "cute", "kawaii"]
                else:
                    fallback_tags = ["anime", "girl", "manga", "art"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                if "beach" in title or "pool" in title or "water" in title:
                    fallback_tags.extend(["beach", "water", "swimsuit"])
                if "bikini" in title:
                    fallback_tags.append("bikini")
                if "nude" in title or "naked" in title:
                    fallback_tags.append("nude")
                if "school" in title:
                    fallback_tags.append("schoolgirl")
                if "maid" in title:
                    fallback_tags.append("maid")
                    
                tags = list(set(fallback_tags))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            method = "fallback"
            logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–ª–±—ç–∫ —Ç–µ–≥–∏: {tags}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–≥–∏ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å
        if not tags:
            logger.error("‚ùå –¢–µ–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏...")
            tags = ["anime", "art", "picture"]

        logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ {method}")
        logger.info(f"üìù –¢–µ–≥–∏: {tags}")

        # –î–ª—è waifu –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏
        if is_waifu:
            original_tags = post['waifu_data']["tags"]
            all_tags = list(set(original_tags + tags))
            logger.info(f"üìä –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –¥–ª—è LM Studio: {len(all_tags)}")
        else:
            all_tags = tags

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        logger.info("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LM Studio...")
        desc, desc_prompt = await process_tags_with_lm(all_tags)
        logger.info(f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥–∏ –æ—Ç AI, –∞ –Ω–µ waifu)
        filtered_tags = filter_tags(tags)
        
        logger.info(f"üè∑Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_tags)} —Ç–µ–≥–æ–≤ –∏–∑ {len(tags)}")
        logger.info(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–µ AI —Ç–µ–≥–∏: {tags[:10]}")
        logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {filtered_tags}")

        # –°–æ–∑–¥–∞–µ–º caption
        hashtags = [f"#{t.replace(' ', '_').replace('-', '_')}" for t in filtered_tags[:10] if t.strip()]
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–æ —Ö–µ—à—Ç–µ–≥–æ–≤: {len(hashtags)}")
        logger.info(f"üìù –•–µ—à—Ç–µ–≥–∏: {hashtags}")
        
        hashtag_string = " ".join(hashtags) if hashtags else ""
        caption = f"{desc}\n\n{hashtag_string}"
        
        logger.info(f"üìÑ –ò—Ç–æ–≥–æ–≤—ã–π caption –¥–ª–∏–Ω–æ–π {len(caption)} —Å–∏–º–≤–æ–ª–æ–≤:")
        logger.info(f"üìÑ Caption: {caption[:200]}{'...' if len(caption) > 200 else ''}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ USER API —Å "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ"!
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç–ª–æ–∂–∫—É Telegram —á–µ—Ä–µ–∑ USER API...")
        await send_photo(img_bytes, caption=caption, schedule_date=scheduled_time)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—ã—á–Ω—É—é –ë–î –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏...")
        await save_post_to_db(
            image_url=post["post_id"],
            image_data=img_bytes,
            description=desc,
            tags="|".join(tag.strip() for tag in all_tags if tag.strip()),
            published_at=scheduled_time.isoformat(),
            interrogate_model=method,
            interrogate_method=method,
            interrogate_prompt=f"{source}_interrogate",
            description_model=LM_MODEL,
            description_prompt=desc_prompt
        )

        logger.info("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–ª–æ–∂–∫—É Telegram —á–µ—Ä–µ–∑ USER API")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–æ–∂–∫–∏: {e}")
        return False


async def process_single_reddit_post(post: dict) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç Reddit.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.
    """

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
    if post["media_type"] == "video":
        logger.info(f"üé• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await send_video(post["media_paths"][0])
        await mark_reddit_processed(post["post_id"])
        logger.info("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ")
        return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
    if post["media_type"] == "gif":
        logger.info(f"üéûÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –±–µ–∑ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await send_animation(post["media_paths"][0])
        await mark_reddit_processed(post["post_id"])
        logger.info("‚úÖ GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—è –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–ª–∏ –≥–∞–ª–µ—Ä–µ–∏)
    logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {'–≥–∞–ª–µ—Ä–µ—é' if post['is_gallery'] else '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}...")

    # –î–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    first_image_path = post["media_paths"][0]
    logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI: {first_image_path}")

    img_bytes = open(first_image_path, "rb").read()
    logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
    logger.info("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI...")
    if USE_TAGGER:
        tags, method = await interrogate_with_tagger(img_bytes)
    else:
        tags, method = [], ""

    if not tags:
        tags, method = await interrogate_deepbooru(img_bytes)

    logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ {method}")
    if tags:
        logger.debug(f"üìù –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤: {tags[:5]}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    logger.info("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LM Studio...")
    desc, desc_prompt = await process_tags_with_lm(tags)
    logger.info(f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    filtered_tags = filter_tags(tags)
    logger.info(f"üè∑Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_tags)} —Ç–µ–≥–æ–≤ –∏–∑ {len(tags)}")
    logger.debug(f"üìù –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {filtered_tags}")

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
    hashtags = [f"#{t.replace(' ', '_').replace('-', '_')}" for t in filtered_tags[:10] if t.strip()]
    caption = f"{desc}\n\n" + " ".join(hashtags)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if post['is_gallery'] and len(post['media_paths']) > 1:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é –∏–∑ {len(post['media_paths'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–π
        media_items = []
        for i, path in enumerate(post['media_paths']):
            with open(path, 'rb') as f:
                media_bytes = f.read()
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                media_items.append({
                    'media': media_bytes,
                    'caption': caption if i == 0 else None
                })

        try:
            await send_media_group(media_items)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            logger.info("üîÑ –ì–∞–ª–µ—Ä–µ—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
        for i, path in enumerate(post['media_paths']):
            with open(path, 'rb') as f:
                img_data = f.read()

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1} –≤ –ë–î...")
            await save_post_to_db(
                image_url=f"{post['post_id']}_image_{i}",
                image_data=img_data,
                description=desc if i == 0 else f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i + 1} –∏–∑ –≥–∞–ª–µ—Ä–µ–∏",
                tags="|".join(tag.strip() for tag in tags if tag.strip()),
                published_at=datetime.now().isoformat(),
                interrogate_model=method if i == 0 else "gallery_item",
                interrogate_method=method if i == 0 else "gallery_item",
                interrogate_prompt="reddit_gallery_interrogate",
                description_model=LM_MODEL if i == 0 else "gallery_item",
                description_prompt=desc_prompt if i == 0 else "gallery_item"
            )
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            await send_photo(img_bytes, caption)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            logger.info("üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...")
        await save_post_to_db(
            image_url=post["post_id"],
            image_data=img_bytes,
            description=desc,
            tags="|".join(tag.strip() for tag in tags if tag.strip()),
            published_at=datetime.now().isoformat(),
            interrogate_model=method,
            interrogate_method=method,
            interrogate_prompt="reddit_interrogate",
            description_model=LM_MODEL,
            description_prompt=desc_prompt
        )

    await mark_reddit_processed(post["post_id"])
    logger.info("‚úÖ Reddit –ø–æ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    return True


async def schedule_batch_posts():
    """–ù–æ–≤—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ - —Å–æ–∑–¥–∞–µ—Ç 8 –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    logger.info("=" * 60)
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –û–¢–õ–û–ñ–ï–ù–ù–´–• –ü–û–°–¢–û–í")
    logger.info("=" * 60)

    start_time = datetime.now()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è 8 –ø–æ—Å—Ç–æ–≤
    publish_times = calculate_publish_times(8)
    logger.info(f"‚è∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    for i, time in enumerate(publish_times):
        logger.info(f"   –ü–æ—Å—Ç #{i + 1}: {time.strftime('%Y-%m-%d %H:%M')}")

    processed_posts = 0
    target_posts = 8

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º subreddit –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for idx, subreddit in enumerate(SUBREDDITS):
        if processed_posts >= target_posts:
            break
            
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º subreddit #{idx + 1}/{len(SUBREDDITS)}: r/{subreddit}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ —á–µ–º –Ω—É–∂–Ω–æ, –Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–æ–∫
        posts = fetch_latest_posts(subreddit, limit=15)
        if not posts:
            logger.info(f"üì≠ –ù–æ–≤—ã—Ö –º–µ–¥–∏–∞-–ø–æ—Å—Ç–æ–≤ –≤ r/{subreddit} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            continue

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for post_idx, post in enumerate(posts):
            if processed_posts >= target_posts:
                break
                
            logger.info(f"üì∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç #{post_idx + 1}: {post['post_id']}")
            
            if await is_reddit_processed(post["post_id"]):
                logger.info(f"‚è≠Ô∏è –ü–æ—Å—Ç {post['post_id']} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
                continue

            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                success = await process_single_post_for_scheduling(post, publish_times[processed_posts])
                if success:
                    await mark_reddit_processed(post["post_id"])
                    processed_posts += 1
                    logger.info(f"‚úÖ –ü–æ—Å—Ç #{processed_posts} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_times[processed_posts-1].strftime('%H:%M %d.%m')}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç {post['post_id']} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ {post['post_id']}: {e}")
                continue

        logger.info(f"üìä –ò–∑ r/{subreddit} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_posts} –ø–æ—Å—Ç–æ–≤")

    # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ–≤ –∏–∑ Reddit, –ø—Ä–æ–±—É–µ–º waifu.fm
    if processed_posts < target_posts:
        logger.info(f"üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å—Ç–æ–≤ –∏–∑ Reddit ({processed_posts}/{target_posts})")
        logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ—Å—Ç—ã –æ—Ç waifu.fm...")
        
        try:
            waifus = fetch_images_data(JSON_URL)
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(waifus)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç waifu.fm")

            for idx, item in enumerate(waifus):
                if processed_posts >= target_posts:
                    break
                    
                try:
                    logger.info(f"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º waifu –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{idx + 1}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–ø–æ—Å—Ç –¥–ª—è waifu
                    waifu_post = {
                        'post_id': f"waifu_{idx}_{int(datetime.now().timestamp())}",
                        'title': f"Waifu #{idx + 1}",
                        'media_type': 'image',
                        'media_paths': [item['url']],  # URL –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
                        'is_gallery': False,
                        'waifu_data': item  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    }
                    
                    scheduled_post_data = await process_single_post_for_scheduling(waifu_post, publish_times[processed_posts])
                    if scheduled_post_data:
                        processed_posts += 1
                        logger.info(f"‚úÖ Waifu –ø–æ—Å—Ç #{processed_posts} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_times[processed_posts-1].strftime('%H:%M %d.%m')}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ waifu –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è #{idx + 1}: {e}")
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ waifu.fm: {e}")

    elapsed = (datetime.now() - start_time).total_seconds()
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è {processed_posts} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {elapsed:.1f} —Å–µ–∫")
    logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {processed_posts}/{target_posts} –ø–æ—Å—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
    logger.info("=" * 60 + "\n")


async def process_cycle():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ - —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
    await schedule_batch_posts()



async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ TgPoster")
    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   - Subreddits ({len(SUBREDDITS)}): {', '.join(f'r/{s}' for s in SUBREDDITS)}")
    logger.info(f"   - Tagger: {'–≤–∫–ª—é—á–µ–Ω' if USE_TAGGER else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    logger.info(f"   - LM Model: {LM_MODEL}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
    logger.info("üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    if not await check_channel_access():
        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return

    # –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...")
    await process_cycle()

    logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("üí° –ü–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Ç–ª–æ–∂–∫—É Telegram –∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")


if __name__ == "__main__":
    asyncio.run(main())
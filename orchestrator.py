import os
import requests
import asyncio
import logging
import yaml
from datetime import datetime
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from typing import List, Set
import logging.handlers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏"""

    grey = "\x1b[38;21m"
    blue = "\x1b[34m"
    green = "\x1b[32m"
    yellow = "\x1b[33m"
    red = "\x1b[31m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"

    FORMATS = {
        logging.DEBUG: grey + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.INFO: green + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.WARNING: yellow + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.ERROR: red + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.CRITICAL: bold_red + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt, datefmt='%Y-%m-%d %H:%M:%S')
        return formatter.format(record)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
root_logger = logging.getLogger()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
console_handler = logging.StreamHandler()
console_handler.setFormatter(ColoredFormatter())
root_logger.addHandler(console_handler)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs('logs', exist_ok=True)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = logging.handlers.RotatingFileHandler(
    'logs/tgposter.log',
    maxBytes=10 * 1024 * 1024,  # 10MB
    backupCount=5,
    encoding='utf-8'
)
file_formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
file_handler.setFormatter(file_formatter)
root_logger.addHandler(file_handler)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è orchestrator
logger = logging.getLogger('orchestrator')
logger.info("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ logs/tgposter.log")

# —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

from services.reddit_service import fetch_latest, fetch_latest_posts
from services.waifu_service import fetch_images_data
from services.sd_service import interrogate_deepbooru, interrogate_with_tagger
from services.lm_service import process_tags_with_lm
from services.telegram_service import send_photo, send_video, send_animation, send_media_group
from services.db_service import init_db, is_reddit_processed, mark_reddit_processed, save_post_to_db

# —á–∏—Ç–∞–µ–º —Ç–∞–π–º–∏–Ω–≥–∏ –∏ subreddit
with open("vars.yaml", encoding="utf-8") as f:
    cfg = yaml.load(f, Loader=yaml.FullLoader)

SUBREDDITS = cfg["reddit"]["subreddits"]
INTERVAL_MIN = cfg["timings"]["time_scope"]
USE_TAGGER = cfg.get("use_tagger", False)
JSON_URL = os.getenv("JSON_URL")
LM_MODEL = os.getenv("LM_MODEL")

# –¢–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Telegram
EXCLUDED_TAGS = {
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    '1boy', '2boys', '3boys', '4boys', '5boys', 'multiple_boys', 'male_focus',
    '1girl', '2girls', '3girls', '4girls', '5girls', 'multiple_girls', 'female_focus',
    'solo', 'solo_focus', 'duo', 'group',

    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
    'highres', 'absurdres', 'lowres', 'traditional_media', 'scan', 'photo',
    'commentary', 'english_commentary', 'chinese_commentary', 'commentary_request',
    'artist_name', 'watermark', 'signature', 'dated', 'username', 'web_address',

    # ID —Ç–µ–≥–∏
    'bad_id', 'bad_pixiv_id', 'bad_twitter_id', 'bad_tumblr_id',
    'pixiv_id', 'twitter_username', 'tumblr_username',

    # –§–æ–Ω—ã
    'simple_background', 'white_background', 'transparent_background',
    'gradient_background', 'grey_background', 'black_background',

    # –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    'black_hair', 'brown_hair', 'blonde_hair', 'blue_hair', 'red_hair',
    'green_hair', 'purple_hair', 'pink_hair', 'white_hair', 'grey_hair',
    'short_hair', 'long_hair', 'medium_hair', 'very_long_hair',

    # –¶–≤–µ—Ç–∞ –≥–ª–∞–∑
    'black_eyes', 'brown_eyes', 'blue_eyes', 'red_eyes', 'green_eyes',
    'purple_eyes', 'yellow_eyes', 'pink_eyes', 'grey_eyes',

    # –ë–∞–∑–æ–≤–∞—è –æ–¥–µ–∂–¥–∞
    'shirt', 'black_shirt', 'white_shirt', 'blue_shirt', 'red_shirt',
    't-shirt', 'dress', 'skirt', 'pants', 'shorts', 'jacket',
    'clothes', 'clothing', 'uniform', 'school_uniform',

    # –û–±—â–∏–µ —Ç–µ–≥–∏
    'blush', 'smile', 'open_mouth', 'closed_mouth', 'teeth',
    'looking_at_viewer', 'looking_at_another', 'looking_away',
    'breasts', 'small_breasts', 'medium_breasts', 'large_breasts',
    'cleavage', 'collarbone', 'bare_shoulders', 'midriff',

    # –ú–µ—Ç–∞-—Ç–µ–≥–∏
    'duplicate', 'image_sample', 'md5_mismatch', 'revision',
    'translated', 'hard_translated', 'partially_translated',
    'translation_request', 'english', 'japanese', 'chinese',

    # –ü—Ä–æ—á–∏–µ –æ–±—â–∏–µ
    'hair', 'eyes', 'face', 'head', 'body', 'skin', 'lips',
    'standing', 'sitting', 'lying', 'kneeling', 'squatting',
    'indoors', 'outdoors', 'day', 'night', 'sky', 'cloud'
}


def filter_tags(tags: List[str]) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–µ–≥–∏, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ"""
    filtered = []
    for tag in tags:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        tag_normalized = tag.lower().replace(' ', '_').replace('-', '_')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if tag_normalized not in EXCLUDED_TAGS:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            skip = False

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–≥–∏ —Å —á–∏—Å–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ (1girl, 2boys –∏ —Ç.–¥.)
            if tag_normalized[0].isdigit():
                skip = True

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ + –æ–±—ä–µ–∫—Ç (black_hair, blue_eyes –∏ —Ç.–¥.)
            color_patterns = ['black_', 'white_', 'red_', 'blue_', 'green_', 'brown_', 'grey_', 'pink_', 'purple_',
                              'yellow_']
            for color in color_patterns:
                if tag_normalized.startswith(color) and tag_normalized.endswith(
                        ('_hair', '_eyes', '_shirt', '_dress', '_skirt')):
                    skip = True
                    break

            if not skip:
                filtered.append(tag)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã–µ —Ç–µ–≥–∏
    return filtered[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ç–µ–≥–∞–º–∏


async def process_reddit_post(subreddit: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ subreddit, –ø–æ–∫–∞ –æ–¥–∏–Ω –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    """
    return await process_reddit_posts(subreddit, max_posts=3)


async def process_reddit_posts(subreddit: str, max_posts: int = 3) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ subreddit, –ø–æ–∫–∞ –æ–¥–∏–Ω –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤.
    """
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Reddit r/{subreddit}...")

    posts = fetch_latest_posts(subreddit, limit=max_posts)
    if not posts:
        logger.info(f"üì≠ –ù–æ–≤—ã—Ö –º–µ–¥–∏–∞-–ø–æ—Å—Ç–æ–≤ –≤ r/{subreddit} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False

    for idx, post in enumerate(posts):
        logger.info(f"üì∞ –ü–æ—Å—Ç #{idx + 1}/{len(posts)}: {post['post_id']}")
        logger.info(f"üìã –¢–∏–ø: {post['media_type']}, —Ñ–∞–π–ª–æ–≤: {len(post['media_paths'])}")

        if await is_reddit_processed(post["post_id"]):
            logger.info(f"‚è≠Ô∏è –ü–æ—Å—Ç {post['post_id']} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
            continue

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç
        try:
            success = await process_single_reddit_post(post)
            if success:
                logger.info(f"‚úÖ –ü–æ—Å—Ç #{idx + 1} –∏–∑ Reddit r/{subreddit} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç #{idx + 1} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                continue
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞ #{idx + 1}: {e}")
            continue

    logger.info(f"üì≠ –ù–∏ –æ–¥–∏–Ω –ø–æ—Å—Ç –∏–∑ r/{subreddit} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
    return False


async def process_single_reddit_post(post: dict) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç Reddit.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, False –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.
    """

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
    if post["media_type"] == "video":
        logger.info(f"üé• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –±–µ–∑ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await send_video(post["media_paths"][0])
        await mark_reddit_processed(post["post_id"])
        logger.info("‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ")
        return True
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GIF - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
    if post["media_type"] == "gif":
        logger.info(f"üéûÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –±–µ–∑ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await send_animation(post["media_paths"][0])
        await mark_reddit_processed(post["post_id"])
        logger.info("‚úÖ GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—è –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–ª–∏ –≥–∞–ª–µ—Ä–µ–∏)
    logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {'–≥–∞–ª–µ—Ä–µ—é' if post['is_gallery'] else '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}...")

    # –î–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    first_image_path = post["media_paths"][0]
    logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI: {first_image_path}")

    img_bytes = open(first_image_path, "rb").read()
    logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
    logger.info("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI...")
    if USE_TAGGER:
        tags, method = await interrogate_with_tagger(img_bytes)
    else:
        tags, method = [], ""

    if not tags:
        tags, method = await interrogate_deepbooru(img_bytes)

    logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ {method}")
    if tags:
        logger.debug(f"üìù –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤: {tags[:5]}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    logger.info("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LM Studio...")
    desc, desc_prompt = await process_tags_with_lm(tags)
    logger.info(f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    filtered_tags = filter_tags(tags)
    logger.info(f"üè∑Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_tags)} —Ç–µ–≥–æ–≤ –∏–∑ {len(tags)}")

    caption = f"{desc}\n\n" + " ".join(f"#{t}" for t in filtered_tags[:10])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if post['is_gallery'] and len(post['media_paths']) > 1:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é –∏–∑ {len(post['media_paths'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–π
        media_items = []
        for i, path in enumerate(post['media_paths']):
            with open(path, 'rb') as f:
                media_bytes = f.read()
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                media_items.append({
                    'media': media_bytes,
                    'caption': caption if i == 0 else None
                })

        try:
            await send_media_group(media_items)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–ª–µ—Ä–µ–∏: {e}")
            logger.info("üîÑ –ì–∞–ª–µ—Ä–µ—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
        for i, path in enumerate(post['media_paths']):
            with open(path, 'rb') as f:
                img_data = f.read()

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1} –≤ –ë–î...")
            await save_post_to_db(
                image_url=f"{post['post_id']}_image_{i}",
                image_data=img_data,
                description=desc if i == 0 else f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i + 1} –∏–∑ –≥–∞–ª–µ—Ä–µ–∏",
                tags=",".join(tags),
                published_at=datetime.now().isoformat(),
                interrogate_model=method if i == 0 else "gallery_item",
                interrogate_method=method if i == 0 else "gallery_item",
                interrogate_prompt="reddit_gallery_interrogate",
                description_model=LM_MODEL if i == 0 else "gallery_item",
                description_prompt=desc_prompt if i == 0 else "gallery_item"
            )
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        try:
            await send_photo(img_bytes, caption)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            logger.info("üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç")
            return False

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...")
        await save_post_to_db(
            image_url=post["post_id"],
            image_data=img_bytes,
            description=desc,
            tags=",".join(tags),
            published_at=datetime.now().isoformat(),
            interrogate_model=method,
            interrogate_method=method,
            interrogate_prompt="reddit_interrogate",
            description_model=LM_MODEL,
            description_prompt=desc_prompt
        )

    await mark_reddit_processed(post["post_id"])
    logger.info("‚úÖ Reddit –ø–æ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    return True


async def process_cycle():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("=" * 60)
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –¶–ò–ö–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    logger.info("=" * 60)

    start_time = datetime.now()

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º subreddit –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    for idx, subreddit in enumerate(SUBREDDITS):
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º subreddit #{idx + 1}/{len(SUBREDDITS)}: r/{subreddit}")
        
        if await process_reddit_post(subreddit):
            logger.info(f"‚úÖ –ü–æ—Å—Ç –∏–∑ r/{subreddit} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {elapsed:.1f} —Å–µ–∫")
            logger.info("=" * 60 + "\n")
            return
        
        logger.info(f"‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ r/{subreddit} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...")

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω subreddit –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ waifu.fm
    logger.info(f"üì≠ –ù–∏ –æ–¥–∏–Ω –∏–∑ {len(SUBREDDITS)} subreddit –Ω–µ –¥–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤")
    logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –∏—Å—Ç–æ—á–Ω–∏–∫—É - waifu.fm...")

    try:
        waifus = fetch_images_data(JSON_URL)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(waifus)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç waifu.fm")

        if not waifus:
            logger.warning("‚ö†Ô∏è Waifu.fm –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return

        # –ü—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∫–∞ –æ–¥–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        processed_successfully = False
        
        for idx, item in enumerate(waifus):
            try:
                logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{idx + 1}: {item['url'][:50]}...")

                resp = requests.get(item["url"], timeout=15)
                resp.raise_for_status()
                img_bytes = resp.content
                logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
                logger.info("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI...")
                if USE_TAGGER:
                    tags_ai, method = await interrogate_with_tagger(img_bytes)
                else:
                    tags_ai, method = [], ""

                if not tags_ai:
                    tags_ai, method = await interrogate_deepbooru(img_bytes)

                logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(tags_ai)} —Ç–µ–≥–æ–≤ –æ—Ç AI —á–µ—Ä–µ–∑ {method}")

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏ –¥–ª—è LM Studio
                original_tags = item["tags"]
                all_tags = list(set(original_tags + tags_ai))
                logger.info(f"üìä –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –¥–ª—è LM Studio: {len(all_tags)}")
                logger.debug(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö: {len(original_tags)}")
                logger.debug(f"   - –û—Ç AI: {len(tags_ai)}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                logger.info("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LM Studio...")
                desc, desc_prompt = await process_tags_with_lm(all_tags)
                logger.info(f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")

                # –í –ø–æ–¥–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
                filtered_tags = filter_tags(original_tags)
                caption = f"{desc}\n\n" + " ".join(f"#{t}" for t in filtered_tags[:10])

                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...")
                try:
                    await send_photo(img_bytes, caption)
                    
                    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...")
                    await save_post_to_db(
                        image_url=item["url"],
                        image_data=img_bytes,
                        description=desc,
                        tags=",".join(all_tags),
                        published_at=datetime.now().isoformat(),
                        interrogate_model=method,
                        interrogate_method=method,
                        interrogate_prompt="waifu_interrogate",
                        description_model=LM_MODEL,
                        description_prompt=desc_prompt
                    )

                    logger.info("‚úÖ Waifu.fm –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    processed_successfully = True
                    break
                    
                except Exception as send_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è #{idx + 1}: {send_error}")
                    if idx < len(waifus) - 1:
                        logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({idx + 2}/{len(waifus)})...")
                        continue
                    else:
                        logger.error("‚ùå –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç waifu.fm –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
                        break
                        
            except Exception as process_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è #{idx + 1}: {process_error}")
                if idx < len(waifus) - 1:
                    logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ({idx + 2}/{len(waifus)})...")
                    continue
                else:
                    logger.error("‚ùå –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç waifu.fm –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")
                    break
        
        if not processed_successfully:
            logger.warning("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ waifu.fm –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ waifu.fm: {e}")

    elapsed = (datetime.now() - start_time).total_seconds()
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {elapsed:.1f} —Å–µ–∫")
    logger.info("=" * 60 + "\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ TgPoster")
    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   - Subreddits ({len(SUBREDDITS)}): {', '.join(f'r/{s}' for s in SUBREDDITS)}")
    logger.info(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {INTERVAL_MIN} –º–∏–Ω—É—Ç")
    logger.info(f"   - Tagger: {'–≤–∫–ª—é—á–µ–Ω' if USE_TAGGER else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    logger.info(f"   - LM Model: {LM_MODEL}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    await process_cycle()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {INTERVAL_MIN} –º–∏–Ω)...")
    scheduler = AsyncIOScheduler()
    scheduler.add_job(process_cycle, "interval", minutes=INTERVAL_MIN)
    scheduler.start()

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...\n")

    # –í–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
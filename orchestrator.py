import os
import requests
import asyncio
import logging
import yaml
from datetime import datetime
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from typing import List, Set


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
class ColoredFormatter(logging.Formatter):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏"""

    grey = "\x1b[38;21m"
    blue = "\x1b[34m"
    green = "\x1b[32m"
    yellow = "\x1b[33m"
    red = "\x1b[31m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"

    FORMATS = {
        logging.DEBUG: grey + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.INFO: green + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.WARNING: yellow + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.ERROR: red + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset,
        logging.CRITICAL: bold_red + "%(asctime)s - %(name)s - %(levelname)s - %(message)s" + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt, datefmt='%Y-%m-%d %H:%M:%S')
        return formatter.format(record)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
root_logger = logging.getLogger()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
console_handler = logging.StreamHandler()
console_handler.setFormatter(ColoredFormatter())
root_logger.addHandler(console_handler)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è orchestrator
logger = logging.getLogger('orchestrator')

# —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

from services.reddit_service import fetch_latest
from services.waifu_service import fetch_images_data
from services.sd_service import interrogate_deepbooru, interrogate_with_tagger
from services.lm_service import process_tags_with_lm
from services.telegram_service import send_photo, send_video, send_media_group
from services.db_service import init_db, is_reddit_processed, mark_reddit_processed, save_post_to_db

# —á–∏—Ç–∞–µ–º —Ç–∞–π–º–∏–Ω–≥–∏ –∏ subreddit
with open("vars.yaml", encoding="utf-8") as f:
    cfg = yaml.load(f, Loader=yaml.FullLoader)

SUBREDDIT = cfg["reddit"]["subreddit"]
SUBREDDIT2 = cfg["reddit"].get("subreddit2", "")
INTERVAL_MIN = cfg["timings"]["time_scope"]
USE_TAGGER = cfg.get("use_tagger", False)
JSON_URL = os.getenv("JSON_URL")
LM_MODEL = os.getenv("LM_MODEL")

# –¢–µ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Telegram
EXCLUDED_TAGS = {
    '1boy', '2boys', '3boys', '4boys', '5boys', 'multiple_boys',
    '1girl', '2girls', '3girls', '4girls', '5girls', 'multiple_girls',
    'solo', 'solo_focus', 'highres', 'absurdres', 'commentary',
    'english_commentary', 'artist_name', 'watermark', 'signature',
    'dated', 'bad_id', 'bad_pixiv_id', 'bad_twitter_id',
    'duplicate', 'image_sample', 'md5_mismatch', 'simple_background',
    'white_background', 'transparent_background'
}


def filter_tags(tags: List[str]) -> List[str]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–µ–≥–∏, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ"""
    filtered = []
    for tag in tags:
        tag_lower = tag.lower().replace(' ', '_')
        if tag_lower not in EXCLUDED_TAGS:
            filtered.append(tag)
    return filtered


async def process_reddit_post(subreddit: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ subreddit.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç.
    """
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Reddit r/{subreddit}...")

    post = fetch_latest(subreddit)
    if not post or not post.get("media_type"):
        logger.info(f"üì≠ –ù–æ–≤—ã—Ö –º–µ–¥–∏–∞-–ø–æ—Å—Ç–æ–≤ –≤ r/{subreddit} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False

    logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç: {post['post_id']}")
    logger.info(f"üìã –¢–∏–ø: {post['media_type']}, —Ñ–∞–π–ª–æ–≤: {len(post['media_paths'])}")

    if await is_reddit_processed(post["post_id"]):
        logger.info(f"‚è≠Ô∏è –ü–æ—Å—Ç {post['post_id']} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ")
        return False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ/–≥–∏—Ñ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
    if post["media_type"] in ("video", "gif"):
        logger.info(f"üé• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {post['media_type']} –±–µ–∑ AI-–æ–±—Ä–∞–±–æ—Ç–∫–∏")
        await send_video(post["media_paths"][0])
        await mark_reddit_processed(post["post_id"])
        logger.info(f"‚úÖ {post['media_type'].capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∏–ª–∏ –≥–∞–ª–µ—Ä–µ–∏)
    logger.info(f"üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {'–≥–∞–ª–µ—Ä–µ—é' if post['is_gallery'] else '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}...")

    # –î–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    first_image_path = post["media_paths"][0]
    logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI: {first_image_path}")

    img_bytes = open(first_image_path, "rb").read()
    logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
    logger.info("üîÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI...")
    if USE_TAGGER:
        tags, method = await interrogate_with_tagger(img_bytes)
    else:
        tags, method = [], ""

    if not tags:
        tags, method = await interrogate_deepbooru(img_bytes)

    logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(tags)} —Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ {method}")
    if tags:
        logger.debug(f"üìù –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤: {tags[:5]}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    logger.info("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LM Studio...")
    desc, desc_prompt = await process_tags_with_lm(tags)
    logger.info(f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    filtered_tags = filter_tags(tags)
    logger.info(f"üè∑Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_tags)} —Ç–µ–≥–æ–≤ –∏–∑ {len(tags)}")

    caption = f"{desc}\n\n" + " ".join(f"#{t}" for t in filtered_tags[:10])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if post['is_gallery'] and len(post['media_paths']) > 1:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é –∏–∑ {len(post['media_paths'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–π
        media_items = []
        for i, path in enumerate(post['media_paths']):
            with open(path, 'rb') as f:
                media_bytes = f.read()
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                media_items.append({
                    'media': media_bytes,
                    'caption': caption if i == 0 else None
                })

        await send_media_group(media_items)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ë–î
        for i, path in enumerate(post['media_paths']):
            with open(path, 'rb') as f:
                img_data = f.read()

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1} –≤ –ë–î...")
            await save_post_to_db(
                image_url=f"{post['post_id']}_image_{i}",
                image_data=img_data,
                description=desc if i == 0 else f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i + 1} –∏–∑ –≥–∞–ª–µ—Ä–µ–∏",
                tags=",".join(tags),
                published_at=datetime.now().isoformat(),
                interrogate_model=method if i == 0 else "gallery_item",
                interrogate_method=method if i == 0 else "gallery_item",
                interrogate_prompt="reddit_gallery_interrogate",
                description_model=LM_MODEL if i == 0 else "gallery_item",
                description_prompt=desc_prompt if i == 0 else "gallery_item"
            )
    else:
        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        await send_photo(img_bytes, caption)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...")
        await save_post_to_db(
            image_url=post["post_id"],
            image_data=img_bytes,
            description=desc,
            tags=",".join(tags),
            published_at=datetime.now().isoformat(),
            interrogate_model=method,
            interrogate_method=method,
            interrogate_prompt="reddit_interrogate",
            description_model=LM_MODEL,
            description_prompt=desc_prompt
        )

    await mark_reddit_processed(post["post_id"])
    logger.info("‚úÖ Reddit –ø–æ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    return True


async def process_cycle():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logger.info("=" * 60)
    logger.info("üöÄ –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –¶–ò–ö–õ–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    logger.info("=" * 60)

    start_time = datetime.now()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π subreddit
    if await process_reddit_post(SUBREDDIT):
        logger.info("‚úÖ –ü–æ—Å—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ subreddit –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        elapsed = (datetime.now() - start_time).total_seconds()
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {elapsed:.1f} —Å–µ–∫")
        logger.info("=" * 60 + "\n")
        return

    # –ï—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π subreddit
    if SUBREDDIT2:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∞—Å–Ω–æ–π subreddit r/{SUBREDDIT2}...")
        if await process_reddit_post(SUBREDDIT2):
            logger.info("‚úÖ –ü–æ—Å—Ç –∏–∑ –∑–∞–ø–∞—Å–Ω–æ–≥–æ subreddit –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {elapsed:.1f} —Å–µ–∫")
            logger.info("=" * 60 + "\n")
            return

    # Fallback –Ω–∞ waifu.fm
    logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback –∏—Å—Ç–æ—á–Ω–∏–∫—É - waifu.fm...")

    try:
        waifus = fetch_images_data(JSON_URL)
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(waifus)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç waifu.fm")

        if not waifus:
            logger.warning("‚ö†Ô∏è Waifu.fm –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        item = waifus[0]
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {item['url'][:50]}...")

        resp = requests.get(item["url"], timeout=15)
        resp.raise_for_status()
        img_bytes = resp.content
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(img_bytes) / 1024 / 1024:.2f} –ú–ë")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –æ—Ç AI
        logger.info("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI...")
        if USE_TAGGER:
            tags_ai, method = await interrogate_with_tagger(img_bytes)
        else:
            tags_ai, method = [], ""

        if not tags_ai:
            tags_ai, method = await interrogate_deepbooru(img_bytes)

        logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(tags_ai)} —Ç–µ–≥–æ–≤ –æ—Ç AI —á–µ—Ä–µ–∑ {method}")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏ –¥–ª—è LM Studio
        original_tags = item["tags"]
        all_tags = list(set(original_tags + tags_ai))
        logger.info(f"üìä –í—Å–µ–≥–æ —Ç–µ–≥–æ–≤ –¥–ª—è LM Studio: {len(all_tags)}")
        logger.debug(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö: {len(original_tags)}")
        logger.debug(f"   - –û—Ç AI: {len(tags_ai)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        logger.info("üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LM Studio...")
        desc, desc_prompt = await process_tags_with_lm(all_tags)
        logger.info(f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(desc)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –í –ø–æ–¥–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
        filtered_tags = filter_tags(original_tags)
        caption = f"{desc}\n\n" + " ".join(f"#{t}" for t in filtered_tags[:10])

        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...")
        await send_photo(img_bytes, caption)

        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...")
        await save_post_to_db(
            image_url=item["url"],
            image_data=img_bytes,
            description=desc,
            tags=",".join(all_tags),
            published_at=datetime.now().isoformat(),
            interrogate_model=method,
            interrogate_method=method,
            interrogate_prompt="waifu_interrogate",
            description_model=LM_MODEL,
            description_prompt=desc_prompt
        )

        logger.info("‚úÖ Waifu.fm –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ waifu.fm: {e}")

    elapsed = (datetime.now() - start_time).total_seconds()
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∞: {elapsed:.1f} —Å–µ–∫")
    logger.info("=" * 60 + "\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ TgPoster")
    logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   - –û—Å–Ω–æ–≤–Ω–æ–π subreddit: r/{SUBREDDIT}")
    logger.info(f"   - –ó–∞–ø–∞—Å–Ω–æ–π subreddit: r/{SUBREDDIT2}" if SUBREDDIT2 else "   - –ó–∞–ø–∞—Å–Ω–æ–π subreddit: –Ω–µ —É–∫–∞–∑–∞–Ω")
    logger.info(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: {INTERVAL_MIN} –º–∏–Ω—É—Ç")
    logger.info(f"   - Tagger: {'–≤–∫–ª—é—á–µ–Ω' if USE_TAGGER else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    logger.info(f"   - LM Model: {LM_MODEL}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    await process_cycle()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    logger.info(f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {INTERVAL_MIN} –º–∏–Ω)...")
    scheduler = AsyncIOScheduler()
    scheduler.add_job(process_cycle, "interval", minutes=INTERVAL_MIN)
    scheduler.start()

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...\n")

    # –í–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
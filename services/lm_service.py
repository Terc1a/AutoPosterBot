import os
import yaml
import aiohttp
import logging
from typing import List, Tuple
from .db_service import get_marked_posts

LM_STUDIO_URL = os.getenv("LM_STUDIO_URL")
LM_MODEL = os.getenv("LM_MODEL")

with open("vars.yaml", encoding="utf-8") as f:
    cfg = yaml.load(f, Loader=yaml.FullLoader)
SYSTEM_PROMPT = cfg["prompts"]["content"]

async def process_tags_with_lm(tags: List[str]) -> Tuple[str, str]:
    tags_str = ", ".join(tags)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    marked_posts = await get_marked_posts()
    negative_examples = ""
    if marked_posts:
        negative_examples = "\n\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –ü–†–ò–ú–ï–†–´ (–ò–ó–ë–ï–ì–ê–ô –¢–ê–ö–û–ì–û –°–¢–ò–õ–Ø):\n"
        for i, bad_desc in enumerate(marked_posts[:3], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
            short_desc = bad_desc[:150] + "..." if len(bad_desc) > 150 else bad_desc
            negative_examples += f"‚ùå –ü–ª–æ—Ö–æ: {short_desc}\n"
        negative_examples += "\n‚ö†Ô∏è –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –æ—à–∏–±–∫–∏ –∏–∑ —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤!"
    
    prompt = (
        f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤–Ω–µ—à–Ω–æ—Å—Ç—å!\n\n"
        f"–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –ö–û–†–û–¢–ö–û–ï —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–µ–≥–∞–º.\n"
        f"–¢–µ–≥–∏: {tags_str}\n"
        f"{negative_examples}\n\n"
        f"üî• –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n"
        f"‚úÖ –ú–ê–ö–°–ò–ú–£–ú 200 –°–ò–ú–í–û–õ–û–í (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã)\n"
        f"‚úÖ –ú–∞–∫—Å–∏–º—É–º 35 —Å–ª–æ–≤\n"
        f"‚úÖ –§–æ–∫—É—Å –¢–û–õ–¨–ö–û –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–µ\n"
        f"‚úÖ –¢–û–õ–¨–ö–û –æ—â—É—â–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏\n\n"
        f"üö´ –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û:\n"
        f"‚ùå –õ—é–±—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ª–∏—Ü–∞, –≤–æ–ª–æ—Å, –≥–ª–∞–∑, —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è\n"
        f"‚ùå –õ—é–±—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–¥–µ–∂–¥—ã, –±–µ–ª—å—è, –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤\n"
        f"‚ùå –õ—é–±—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è, –º–µ–±–µ–ª–∏, –ª–æ–∫–∞—Ü–∏–π\n"
        f"‚ùå –°–ª–æ–≤–∞: –∫—Ä–∞—Å–∏–≤–∞—è, –¥–ª–∏–Ω–Ω—ã–µ, –∫–æ—Ä–æ—Ç–∫–∏–µ, –±–æ–ª—å—à–∏–µ, –º–∞–ª–µ–Ω—å–∫–∏–µ (–æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏)\n\n"
        f"‚ö° –ü–û–ú–ù–ò: –û–ø–∏—Å—ã–≤–∞–π –¢–û–õ–¨–ö–û —á—Ç–æ –î–ï–õ–ê–Æ–¢, –ù–ï –∫–∞–∫ –í–´–ì–õ–Ø–î–Ø–¢!\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è):"
    )
    
    payload = {
        "model": LM_MODEL,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.6,  # –°–Ω–∏–∂–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
        "max_tokens": 80,    # –ñ–µ—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)
        "stop": ["\n\n", "200", "—Å–∏–º–≤–æ–ª–æ–≤"]  # –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{LM_STUDIO_URL}/v1/chat/completions",
                json=payload,
                timeout=aiohttp.ClientTimeout(total=120)
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    desc = data["choices"][0]["message"]["content"].strip()
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç –ª–∏–º–∏—Ç
                    if len(desc) > 200:
                        desc = desc[:197] + "..."
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ (—Å–º—è–≥—á–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
                    forbidden_appearance = [
                        '–∫—Ä–∞—Å–∏–≤', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω', '–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω', 
                        '–±–ª–æ–Ω–¥–∏–Ω', '–±—Ä—é–Ω–µ—Ç', '—Ä—ã–∂', '—Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å', '—Ç–µ–º–Ω—ã–µ –≤–æ–ª–æ—Å',
                        '–≥–æ–ª—É–±—ã–µ –≥–ª–∞–∑–∞', '–∫–∞—Ä–∏–µ –≥–ª–∞–∑–∞', '–∑–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞', '–±–æ–ª—å—à–∏–µ –≥–ª–∞–∑–∞',
                        '–¥–ª–∏–Ω–Ω—ã–µ –≤–æ–ª–æ—Å', '–∫–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ª–æ—Å', '–∫—É–¥—Ä—è–≤—ã–µ –≤–æ–ª–æ—Å', '–ø—Ä—è–º—ã–µ –≤–æ–ª–æ—Å',
                        '—Å—Ç—Ä–æ–π–Ω', '–ø–æ–ª–Ω', '—Ö—É–¥', '—Ç–æ–ª—Å—Ç', '–≤—ã—Å–æ–∫', '–Ω–∏–∑–∫', '–º–∏–Ω–∏–∞—Ç—é—Ä–Ω',
                        '–ø–ª–∞—Ç—å–µ', '—é–±–∫–∞', '–±–ª—É–∑–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–¥–∂–∏–Ω—Å—ã', '–±—Ä—é–∫–∏',
                        '–∫–æ–º–Ω–∞—Ç–∞', '—Å–ø–∞–ª—å–Ω—è', '–≥–æ—Å—Ç–∏–Ω–∞—è', '–∫—É—Ö–Ω—è', '–≤–∞–Ω–Ω–∞—è', '–æ—Ñ–∏—Å', '—à–∫–æ–ª–∞'
                    ]
                    
                    desc_lower = desc.lower()
                    contains_forbidden = any(word in desc_lower for word in forbidden_appearance)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {desc}")
                    if contains_forbidden:
                        found_words = [word for word in forbidden_appearance if word in desc_lower]
                        logging.warning(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ, –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {found_words}")
                        return "", f"{prompt}\n\n[–û–¢–ö–õ–û–ù–ï–ù–û: —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤–Ω–µ—à–Ω–æ—Å—Ç–∏: {found_words}]"
                        
                    return desc, prompt
                logging.error(f"LM Studio API returned {resp.status}")
    except Exception as e:
        logging.error(f"process_tags_with_lm error: {e}")
    return "", prompt

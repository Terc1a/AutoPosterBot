import os
import logging
from telegram import Bot, InputMediaPhoto
from io import BytesIO
from typing import List, Dict
from PIL import Image

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
bot = Bot(token=BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è telegram_service
logger = logging.getLogger('telegram_service')
logger.setLevel(logging.DEBUG)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
MAX_FILE_SIZE_MB = 50  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Telegram
MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024


def validate_image_dimensions(image_bytes: bytes) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º Telegram"""
    try:
        bio = BytesIO(image_bytes)
        with Image.open(bio) as img:
            width, height = img.size
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram
            max_resolution = 10000
            max_total_size = 10000
            
            if width > max_resolution or height > max_resolution:
                return False, f"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ {width}x{height} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º {max_resolution}x{max_resolution}"
            
            if width + height > max_total_size:
                return False, f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä {width + height} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_total_size}"
            
            return True, f"–†–∞–∑–º–µ—Ä—ã {width}x{height} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
            
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}"


def compress_image(image_bytes: bytes, max_size_mb: float = MAX_FILE_SIZE_MB) -> bytes:
    """
    –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ –ú–ë
    
    Args:
        image_bytes: –∏—Å—Ö–æ–¥–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_size_mb: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
        
    Returns:
        bytes: —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    """
    try:
        max_size_bytes = max_size_mb * 1024 * 1024
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(image_bytes) <= max_size_bytes:
            logger.debug(f"üìè –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {len(image_bytes) / 1024 / 1024:.2f} –ú–ë")
            return image_bytes
        
        logger.info(f"üóúÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(image_bytes) / 1024 / 1024:.2f} –ú–ë -> {max_size_mb} –ú–ë")
        
        bio = BytesIO(image_bytes)
        with Image.open(bio) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if img.mode in ('RGBA', 'P'):
                img = img.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            original_width, original_height = img.size
            
            # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            quality = 95
            
            while quality > 10:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è
                temp_img = img.copy()
                
                # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 70, –Ω–∞—á–∏–Ω–∞–µ–º —É–º–µ–Ω—å—à–∞—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                if quality < 70:
                    scale_factor = quality / 70
                    new_width = int(original_width * scale_factor)
                    new_height = int(original_height * scale_factor)
                    temp_img = temp_img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # –°–∂–∏–º–∞–µ–º
                output = BytesIO()
                temp_img.save(output, format='JPEG', quality=quality, optimize=True)
                compressed_bytes = output.getvalue()
                
                current_size_mb = len(compressed_bytes) / 1024 / 1024
                logger.debug(f"   üéõÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ {quality}%, —Ä–∞–∑–º–µ—Ä: {current_size_mb:.2f} –ú–ë")
                
                # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if len(compressed_bytes) <= max_size_bytes:
                    logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: {len(image_bytes) / 1024 / 1024:.2f} –ú–ë -> {current_size_mb:.2f} –ú–ë (–∫–∞—á–µ—Å—Ç–≤–æ {quality}%)")
                    return compressed_bytes
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                quality -= 10
            
            # –ï—Å–ª–∏ –¥–∞–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {max_size_mb} –ú–ë, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º")
            return compressed_bytes
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image_bytes


async def send_photo(image_bytes: bytes, caption: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª"""
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, —Ä–∞–∑–º–µ—Ä: {len(image_bytes) / 1024 / 1024:.2f} –ú–ë")
    
    # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    compressed_bytes = compress_image(image_bytes)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    is_valid, validation_msg = validate_image_dimensions(compressed_bytes)
    logger.info(f"üìè {validation_msg}")
    
    if not is_valid:
        logger.error(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É: {validation_msg}")
        raise ValueError(f"Invalid image dimensions: {validation_msg}")
    
    bio = BytesIO(compressed_bytes)
    bio.name = "image.jpg"  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ jpg —Ç–∞–∫ –∫–∞–∫ —Å–∂–∏–º–∞–µ–º –≤ JPEG
    bio.seek(0)

    try:
        message = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=bio,
            caption=caption[:1024] if caption else None,
            read_timeout=120,
            write_timeout=120,
            connect_timeout=60
        )
        logger.info(f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id: {message.message_id})")
        return message
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        raise


async def send_video(file_path: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª"""
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ: {file_path}")

    try:
        file_size = os.path.getsize(file_path) / 1024 / 1024  # MB
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {file_size:.2f} –ú–ë")

        with open(file_path, "rb") as f:
            message = await bot.send_video(
                chat_id=CHANNEL_ID,
                video=f,
                read_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
                write_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
                connect_timeout=60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            )
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id: {message.message_id})")
        return message
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        raise


async def send_animation(file_path: str, caption: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª"""
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏: {file_path}")

    try:
        file_size = os.path.getsize(file_path) / 1024 / 1024  # MB
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏: {file_size:.2f} –ú–ë")

        with open(file_path, "rb") as f:
            message = await bot.send_animation(
                chat_id=CHANNEL_ID,
                animation=f,
                caption=caption[:1024] if caption else None,
                read_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
                write_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
                connect_timeout=60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            )
        logger.info(f"‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (message_id: {message.message_id})")
        return message
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
        raise


async def send_media_group(media_items: List[Dict]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (–∞–ª—å–±–æ–º) –≤ –∫–∞–Ω–∞–ª

    Args:
        media_items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
            - 'media': bytes - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            - 'caption': str - –ø–æ–¥–ø–∏—Å—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
    """
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑ {len(media_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        media_group = []

        for i, item in enumerate(media_items):
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            compressed_media = compress_image(item['media'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            is_valid, validation_msg = validate_image_dimensions(compressed_media)
            logger.debug(f"   üìè –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1}: {validation_msg}")
            
            if not is_valid:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1}: {validation_msg}")
                continue
            
            bio = BytesIO(compressed_media)
            bio.name = f"image_{i}.jpg"  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ jpg —Ç–∞–∫ –∫–∞–∫ —Å–∂–∏–º–∞–µ–º –≤ JPEG
            bio.seek(0)

            media_size = len(compressed_media) / 1024 / 1024
            logger.debug(f"   üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1}: {media_size:.2f} –ú–ë")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            if i == 0 and item.get('caption'):
                media = InputMediaPhoto(
                    media=bio,
                    caption=item['caption'][:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                )
            else:
                media = InputMediaPhoto(media=bio)

            media_group.append(media)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
        messages = await bot.send_media_group(
            chat_id=CHANNEL_ID,
            media=media_group,
            read_timeout=300,
            write_timeout=300,
            connect_timeout=60
        )

        logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        logger.debug(f"   Message IDs: {[m.message_id for m in messages]}")

        return messages

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
        raise
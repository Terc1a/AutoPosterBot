import os
import logging
from telegram import Bot, InputMediaPhoto
from io import BytesIO
from typing import List, Dict

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
bot = Bot(token=BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è telegram_service
logger = logging.getLogger('telegram_service')
logger.setLevel(logging.DEBUG)


async def send_photo(image_bytes: bytes, caption: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª"""
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, —Ä–∞–∑–º–µ—Ä: {len(image_bytes) / 1024 / 1024:.2f} –ú–ë")
    bio = BytesIO(image_bytes)
    bio.name = "image.png"
    bio.seek(0)

    try:
        message = await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=bio,
            caption=caption[:1024] if caption else None,
            read_timeout=120,
            write_timeout=120,
            connect_timeout=60
        )
        logger.info(f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id: {message.message_id})")
        return message
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        raise


async def send_video(file_path: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª"""
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ: {file_path}")

    try:
        file_size = os.path.getsize(file_path) / 1024 / 1024  # MB
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {file_size:.2f} –ú–ë")

        with open(file_path, "rb") as f:
            message = await bot.send_video(
                chat_id=CHANNEL_ID,
                video=f,
                read_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
                write_timeout=300,  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
                connect_timeout=60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            )
        logger.info(f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id: {message.message_id})")
        return message
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        raise


async def send_media_group(media_items: List[Dict]):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ (–∞–ª—å–±–æ–º) –≤ –∫–∞–Ω–∞–ª

    Args:
        media_items: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏:
            - 'media': bytes - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            - 'caption': str - –ø–æ–¥–ø–∏—Å—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
    """
    logger.info(f"üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–∑ {len(media_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        media_group = []

        for i, item in enumerate(media_items):
            bio = BytesIO(item['media'])
            bio.name = f"image_{i}.png"
            bio.seek(0)

            media_size = len(item['media']) / 1024 / 1024
            logger.debug(f"   üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{i + 1}: {media_size:.2f} –ú–ë")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            if i == 0 and item.get('caption'):
                media = InputMediaPhoto(
                    media=bio,
                    caption=item['caption'][:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                )
            else:
                media = InputMediaPhoto(media=bio)

            media_group.append(media)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
        messages = await bot.send_media_group(
            chat_id=CHANNEL_ID,
            media=media_group,
            read_timeout=300,
            write_timeout=300,
            connect_timeout=60
        )

        logger.info(f"‚úÖ –ú–µ–¥–∏–∞-–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
        logger.debug(f"   Message IDs: {[m.message_id for m in messages]}")

        return messages

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã: {e}")
        raise
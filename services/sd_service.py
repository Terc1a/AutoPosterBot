import os
import base64
import logging
import aiohttp
from typing import List, Tuple

SD_URL = os.getenv("SD_URL")

async def interrogate_deepbooru(image_bytes: bytes) -> Tuple[List[str], str]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ SD WebUI interrogate-–º–æ–¥–µ–ª–∏: deepdanbooru ‚Üí deepbooru ‚Üí clip ‚Üí interrogate
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤, –∏–º—è –º–æ–¥–µ–ª–∏)
    """
    logger = logging.getLogger(__name__)
    logger.info(f"üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ SD WebUI: {SD_URL}")
    
    try:
        b64 = base64.b64encode(image_bytes).decode("utf-8")
        for model_name in ["deepdanbooru", "deepbooru", "clip", "interrogate"]:
            logger.info(f"üîÆ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
            payload = {"image": f"data:image/png;base64,{b64}", "model": model_name}
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{SD_URL}/sdapi/v1/interrogate",
                    json=payload,
                    headers={"Content-Type": "application/json"},
                    timeout=aiohttp.ClientTimeout(total=120)
                ) as resp:
                    logger.info(f"üì° SD WebUI –æ—Ç–≤–µ—Ç: {resp.status}")
                    if resp.status == 200:
                        data = await resp.json()
                        caption = data.get("caption", "")
                        logger.info(f"üì° SD API –æ—Ç–≤–µ—Ç: {data}")
                        logger.info(f"üìù –ü–æ–ª–Ω–∞—è caption: '{caption}'")
                        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ caption: {caption[:100]}...")
                        
                        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º —Ç–µ–≥–∏ - SD –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                        if "," in caption:
                            tags = [tag.strip() for tag in caption.split(",") if tag.strip()]
                        else:
                            tags = [tag.strip() for tag in caption.split() if tag.strip()]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
                        if not tags or tags == ['<error>'] or (len(tags) == 1 and '<' in tags[0]):
                            logger.warning(f"‚ö†Ô∏è SD WebUI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏: '{caption}'")
                            continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                        
                        logger.info(f"üè∑Ô∏è –†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ {len(tags)} —Ç–µ–≥–æ–≤: {tags[:10]}")
                        logger.info(f"üîç –í—Å–µ —Ç–µ–≥–∏: {tags}")
                        return tags, model_name
                    else:
                        logger.warning(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {resp.status}")
    except Exception as e:
        logger.error(f"‚ùå interrogate_deepbooru error: {e}")
    
    logger.warning("üö´ SD WebUI –Ω–µ –¥–∞–ª —Ç–µ–≥–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
    return [], "none"


async def interrogate_with_tagger(image_bytes: bytes) -> Tuple[List[str], str]:
    """
    –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω tagger extension –≤ SD WebUI
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (—Ç–µ–≥–∏, "tagger_extension") –∏–ª–∏ ([], reason)
    """
    try:
        b64 = base64.b64encode(image_bytes).decode("utf-8")
        payload = {"image": f"data:image/png;base64,{b64}", "threshold": 0.35}
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{SD_URL}/tagger/v1/interrogate",
                json=payload,
                timeout=aiohttp.ClientTimeout(total=60)
            ) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    tags_dict = data.get("tags", {})
                    sorted_tags = sorted(tags_dict.items(), key=lambda x: x[1], reverse=True)
                    tags = [tag for tag, weight in sorted_tags if weight > 0.35][:20]
                    if tags:
                        return tags, "tagger_extension"
    except Exception as e:
        logging.debug(f"interrogate_with_tagger error: {e}")
    return [], "tagger_not_available"
